
package InterfazPrincipal;

import Escudero.Alert;
import InterfazPrincipal.Clases.CitasMedicas;
import dataConexion.ConexionBD;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TRSYR
 */
public class FrmGestionCitas extends javax.swing.JFrame {

    /**
     * Creates new form FrmGestionCitas
     */
    private ConexionBD conexionBD;
    public SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
    private FrmInterfazPrincipal principal;
    private FrmGestionCitas gestionCitas;
    private final ArrayList<CitasMedicas>citas;
    
    public FrmGestionCitas(ArrayList<CitasMedicas>citas) {
        initComponents();
        this.citas = citas;
        this.conexionBD = new ConexionBD();
        this.conexionBD.conectar();
        mostrarCitasEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboEstados = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbRegistrosMedicos = new javax.swing.JTable();
        dateFinal = new com.toedter.calendar.JDateChooser();
        dateInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        btnCitasporMedico = new javax.swing.JButton();
        comboMedico = new javax.swing.JComboBox<>();
        comboMeses = new javax.swing.JComboBox<>();
        btnRestablecer = new javax.swing.JButton();
        btnCalcularTotalCopagos = new javax.swing.JButton();
        btnFiltrarPorMesYAnio = new javax.swing.JButton();
        comboMesesCopago = new javax.swing.JComboBox<>();
        ComboAnioCopago = new javax.swing.JComboBox<>();
        lblTotalCopagosMes = new javax.swing.JLabel();
        ComboAnio = new javax.swing.JComboBox<>();
        btnCalcularTotalCopagosAnio = new javax.swing.JButton();
        lblTotalCopagos = new javax.swing.JLabel();
        btnFiltrarPorEstado = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnCambiarEstado = new javax.swing.JButton();
        txtCodigoCita = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 600));

        comboEstados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Programada", "Activa", "Atendida", "Cancelada" }));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Estado");

        tbRegistrosMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbRegistrosMedicos);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Fecha Inicial");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Fecha Final");

        btnConsultar.setText("Reporte de citas");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnCitasporMedico.setText("Citas por medico");
        btnCitasporMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitasporMedicoActionPerformed(evt);
            }
        });

        comboMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dra. Laura Lopez", "Dr. Manuel Torres", "Dra. Sofia Diaz", "Dr. Victor Ramirez", "Dr. Juan Pérez", "Dra. María García", "Dr. Pedro López", "Dra. Laura Martínez", "Dr. José Ramírez", "Dra. Ana Rodríguez", "Dr. Martín Gómez", "Dra. Julia Sánchez", "Dr. Carlos Pérez", "Dra. Rosa López", "Dr. Miguel Martínez", "Dra. Paola Ramírez", "Dr. Alejandro Sánchez", "Dra. Claudia Gómez", "Dr. Jorge Rodríguez", "Dra. Laura Pérez", "Dr. Javier Martínez", "Dra. María Gutiérrez", "Dr. Gabriel Sánchez", "Dra. Andrea López", "Jorman Herrera" }));

        comboMeses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        btnRestablecer.setText("Reestablecer Registros");
        btnRestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestablecerActionPerformed(evt);
            }
        });

        btnCalcularTotalCopagos.setText("Total Copagos");
        btnCalcularTotalCopagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularTotalCopagosActionPerformed(evt);
            }
        });

        btnFiltrarPorMesYAnio.setText("Filtrar por mes y año");
        btnFiltrarPorMesYAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorMesYAnioActionPerformed(evt);
            }
        });

        comboMesesCopago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agoato", "septiembre", "octubre", "noviembre", "diciembre" }));

        ComboAnioCopago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024", "2025" }));

        lblTotalCopagosMes.setText("(Resultado)");

        ComboAnio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024", "2025", "2026" }));

        btnCalcularTotalCopagosAnio.setText("Calcular por año");
        btnCalcularTotalCopagosAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularTotalCopagosAnioActionPerformed(evt);
            }
        });

        lblTotalCopagos.setText("(Resultado)");

        btnFiltrarPorEstado.setText("Filtrar Por Estado");
        btnFiltrarPorEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorEstadoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Cambiar Estado Individual");

        btnCambiarEstado.setText("Cambiar");
        btnCambiarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(654, 654, 654)
                .addComponent(comboMesesCopago, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(ComboAnioCopago, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(btnCitasporMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotalCopagosMes)
                .addGap(139, 139, 139))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFiltrarPorMesYAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnRestablecer)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ComboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnCalcularTotalCopagos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCalcularTotalCopagosAnio, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)))
                .addGap(90, 90, 90))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(btnCambiarEstado)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(comboEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnFiltrarPorEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(jLabel3))
                                .addComponent(dateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(btnConsultar)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dateInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel2))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(comboMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(txtCodigoCita, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalCopagos)
                        .addGap(151, 151, 151))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMesesCopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboAnioCopago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTotalCopagosMes)
                        .addGap(18, 18, 18)
                        .addComponent(btnFiltrarPorMesYAnio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCitasporMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFiltrarPorEstado))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCodigoCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCambiarEstado)
                            .addComponent(ComboAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(btnCalcularTotalCopagosAnio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2)
                        .addGap(11, 11, 11)
                        .addComponent(dateInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsultar)
                    .addComponent(lblTotalCopagos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCalcularTotalCopagos)
                .addGap(26, 26, 26)
                .addComponent(btnRestablecer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarCitasEnTabla() {
        DefaultTableModel modelo = new DefaultTableModel(); // Crear un nuevo modelo de tabla

        try {
            // Llamar al procedimiento almacenado para obtener las citas médicas
            String call = "{CALL obtener_citas()}";
            CallableStatement statement = conexionBD.getConnection().prepareCall(call);
            ResultSet resultSet = statement.executeQuery();

            // Obtener metadatos de la consulta para determinar el número y nombre de las columnas
            int columnCount = resultSet.getMetaData().getColumnCount();
            String[] columnNames = new String[columnCount];

            // Obtener nombres de columnas de metadatos y configurar nombres descriptivos
            for (int i = 0; i < columnCount; i++) {
                String columnName = resultSet.getMetaData().getColumnLabel(i + 1); // Los índices de columna en JDBC comienzan desde 1

                // Configurar nombres descriptivos para columnas específicas
                switch (columnName) {
                    case "nombre_paciente":
                        columnNames[i] = "Nombre Paciente";
                        break;
                    case "nombre_medico":
                        columnNames[i] = "Nombre Médico";
                        break;
                    case "nombre_eps":
                        columnNames[i] = "EPS Paciente";
                        break;
                    case "copago":
                        columnNames[i] = "Copago";
                        break;
                    default:
                        columnNames[i] = columnName; // Usar el nombre de columna original para las demás columnas
                        break;
                }
            }

            // Establecer nombres de columnas en el modelo de tabla
            modelo.setColumnIdentifiers(columnNames);

            // Recorrer el resultado de la consulta y agregar cada fila al modelo de la tabla
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];

                // Obtener valores de cada columna y agregar a la fila de datos
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resultSet.getObject(i + 1); // Los índices de columna en JDBC comienzan desde 1
                }

                // Agregar una fila al modelo de la tabla con los datos de la cita
                modelo.addRow(rowData);
            }

            // Actualizar el modelo de la tabla con los nuevos datos
            tbRegistrosMedicos.setModel(modelo);

        } catch (SQLException e) {
            e.printStackTrace();
            // Manejar el error según sea necesario
        } finally {
            // Cerrar recursos JDBC (no se recomienda manejar en la cláusula finally, pero puede ser necesario)
        }
    }

    
    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
        if (validarInformacion()) {
            try {
                Date fechaInicial = dateInicial.getDate();
                Date fechaFinal = dateFinal.getDate();

                // Formatear fechas para utilizarlas en la consulta SQL
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                String fechaInicioStr = dateFormat.format(fechaInicial);
                String fechaFinStr = dateFormat.format(fechaFinal);

                // Llamar al procedimiento almacenado para obtener las citas médicas por fecha
                String call = "{CALL obtener_citas_por_fecha(?, ?)}";
                CallableStatement statement = conexionBD.getConnection().prepareCall(call);
                statement.setString(1, fechaInicioStr);
                statement.setString(2, fechaFinStr);
                ResultSet resultSet = statement.executeQuery();

                // Obtener metadatos de la consulta para determinar el número y nombre de las columnas
                DefaultTableModel modelo = new DefaultTableModel();
                int columnCount = resultSet.getMetaData().getColumnCount();
                String[] columnNames = new String[columnCount];

                // Obtener nombres de columnas de metadatos y configurar nombres descriptivos
                for (int i = 0; i < columnCount; i++) {
                    String columnName = resultSet.getMetaData().getColumnLabel(i + 1); // Los índices de columna en JDBC comienzan desde 1

                    // Configurar nombres descriptivos para columnas específicas
                    switch (columnName) {
                        case "nombre_paciente":
                            columnNames[i] = "Nombre Paciente";
                            break;
                        case "nombre_medico":
                            columnNames[i] = "Nombre Médico";
                            break;
                        case "nombre_eps":
                            columnNames[i] = "EPS Paciente";
                            break;
                        case "copago":
                            columnNames[i] = "Copago";
                            break;
                        default:
                            columnNames[i] = columnName; // Usar el nombre de columna original para las demás columnas
                            break;
                    }
                }

                // Establecer nombres de columnas en el modelo de tabla
                modelo.setColumnIdentifiers(columnNames);

                // Recorrer el resultado de la consulta y agregar cada fila al modelo de la tabla
                while (resultSet.next()) {
                    Object[] rowData = new Object[columnCount];

                    // Obtener valores de cada columna y agregar a la fila de datos
                    for (int i = 0; i < columnCount; i++) {
                        rowData[i] = resultSet.getObject(i + 1); // Los índices de columna en JDBC comienzan desde 1
                    }

                    // Agregar una fila al modelo de la tabla con los datos de la cita
                    modelo.addRow(rowData);
                }

                // Actualizar el modelo de la tabla con los nuevos datos
                tbRegistrosMedicos.setModel(modelo);

                // Cerrar recursos
                resultSet.close();
                statement.close();

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al consultar citas por fecha", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ingrese fechas válidas para la consulta", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void executeAndShowQuery(String query) throws SQLException {
        DefaultTableModel modelo = new DefaultTableModel();

        // Ejecutar la consulta SQL
        ResultSet resultSet = conexionBD.getConnection().createStatement().executeQuery(query);

        // Configurar el modelo de tabla con las columnas deseadas
       
        modelo.addColumn("Código");
        modelo.addColumn("Fecha Cita");
        modelo.addColumn("Hora");
        modelo.addColumn("Estado");
        modelo.addColumn("Nombre Paciente");
        modelo.addColumn("EPS");
        modelo.addColumn("Copago");
        modelo.addColumn("Nombre Médico");
        modelo.addColumn("Dirección IPS");

        // Iterar sobre los resultados y agregar filas al modelo de la tabla
        while (resultSet.next()) {
            Object[] rowData = new Object[10]; // Crear arreglo para cada fila con 10 columnas

            // Obtener valores específicos de cada columna y agregarlos al arreglo de datos de fila
            
            rowData[0] = resultSet.getString("codigo");
            rowData[1] = resultSet.getDate("fechaCita");
            rowData[2] = resultSet.getTime("hora");
            rowData[3] = resultSet.getString("estado");
            rowData[4] = resultSet.getString("nombre_paciente");

            // Acceder a la columna 'nombre_eps' (verifica el nombre exacto de la columna en tu base de datos)
            rowData[5] = resultSet.getString("nombre_eps"); // Asegúrate de que el nombre de la columna sea correcto

            rowData[6] = resultSet.getInt("copago");
            rowData[7] = resultSet.getString("nombre_medico");
            rowData[8] = resultSet.getString("direccion_ips");

            // Agregar la fila al modelo de la tabla
            modelo.addRow(rowData);
        }

        // Establecer el modelo de la tabla con los datos configurados
        tbRegistrosMedicos.setModel(modelo);
    }
    
    private void btnCitasporMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitasporMedicoActionPerformed
        try {
        // Obtener el nombre del médico seleccionado
        String nombreMedico = (String) comboMedico.getSelectedItem();
        // Obtener el mes seleccionado
        int mesSeleccionado = comboMeses.getSelectedIndex() + 1;

        // Preparar el llamado al procedimiento almacenado
        CallableStatement stmt = conexionBD.getConnection().prepareCall("{CALL ObtenerCitasPorMedicoYMes(?, ?)}");
        stmt.setString(1, nombreMedico); // Establecer el nombre del médico como parámetro de entrada
        stmt.setInt(2, mesSeleccionado); // Establecer el mes seleccionado como parámetro de entrada

        // Ejecutar el procedimiento almacenado y obtener los resultados
        ResultSet resultSet = stmt.executeQuery();

        // Mostrar los resultados en la tabla
        mostrarResultadosEnTabla(resultSet);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al obtener las citas por médico y mes", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        
    }//GEN-LAST:event_btnCitasporMedicoActionPerformed

    private void mostrarResultadosEnTabla(ResultSet resultSet) throws SQLException {
        DefaultTableModel modelo = new DefaultTableModel();

        // Configurar el modelo de tabla con las columnas deseadas
        
        modelo.addColumn("Código");
        modelo.addColumn("Fecha Cita");
        modelo.addColumn("Hora");
        modelo.addColumn("Estado");
        modelo.addColumn("Nombre Paciente");
        modelo.addColumn("EPS");
        modelo.addColumn("Copago");
        modelo.addColumn("Nombre Médico");
        modelo.addColumn("Dirección IPS");

        // Iterar sobre los resultados y agregar filas al modelo de la tabla
        while (resultSet.next()) {
            Object[] rowData = new Object[10]; // Crear arreglo para cada fila con 10 columnas

            // Obtener valores específicos de cada columna y agregarlos al arreglo de datos de fila
            
            rowData[0] = resultSet.getString("codigo");
            rowData[1] = resultSet.getDate("fechaCita");
            rowData[2] = resultSet.getTime("hora");
            rowData[3] = resultSet.getString("estado");
            rowData[4] = resultSet.getString("nombre_paciente");
            rowData[5] = resultSet.getString("nombre_eps");
            rowData[6] = resultSet.getInt("copago");
            rowData[7] = resultSet.getString("nombre_medico");
            rowData[8] = resultSet.getString("direccion_ips");

            // Agregar la fila al modelo de la tabla
            modelo.addRow(rowData);
        }

        // Establecer el modelo de la tabla con los datos configurados
        tbRegistrosMedicos.setModel(modelo);
    }

    private void btnRestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestablecerActionPerformed
        // TODO add your handling code here:
        mostrarCitasEnTabla();
    }//GEN-LAST:event_btnRestablecerActionPerformed

    private void btnCalcularTotalCopagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularTotalCopagosActionPerformed
        try {
            // Preparar el llamado al procedimiento almacenado
            CallableStatement stmt = conexionBD.getConnection().prepareCall("{CALL SumarTodosLosCopagos(?)}");
            stmt.registerOutParameter(1, Types.INTEGER); // Registrar el primer parámetro como de salida

            // Ejecutar el procedimiento almacenado
            stmt.execute();

            // Obtener el total de copagos del parámetro de salida
            int totalCopagos = stmt.getInt(1);

            // Mostrar el resultado en un componente de la interfaz (por ejemplo, un JLabel)
            lblTotalCopagos.setText("Total Copagos: " + totalCopagos);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al calcular el total de copagos", "Error", JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_btnCalcularTotalCopagosActionPerformed

    private void btnFiltrarPorMesYAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorMesYAnioActionPerformed
        try {
            // Obtener el mes seleccionado como String desde el JComboBox
            String mesSeleccionadoStr = (String) comboMesesCopago.getSelectedItem();
            // Convertir el nombre del mes a su número correspondiente (ejemplo: "Enero" -> 1)
            int mesSeleccionado = obtenerIndiceMes(mesSeleccionadoStr) + 1; // Esta función debe estar implementada

            // Obtener el año seleccionado como String desde el JComboBox y convertirlo a entero
            String anioSeleccionadoStr = (String) ComboAnioCopago.getSelectedItem();
            int anioSeleccionado = Integer.parseInt(anioSeleccionadoStr);

            // Preparar el llamado al procedimiento almacenado
            CallableStatement stmt = conexionBD.getConnection().prepareCall("{CALL SumarCopagosCitasPorMesYAnio(?, ?, ?)}");
            stmt.setInt(1, mesSeleccionado); // Establecer el mes seleccionado como parámetro de entrada
            stmt.setInt(2, anioSeleccionado); // Establecer el año seleccionado como parámetro de entrada
            stmt.registerOutParameter(3, Types.INTEGER); // Registrar el tercer parámetro como de salida

            // Ejecutar el procedimiento almacenado
            stmt.execute();

            // Obtener el total de copagos del parámetro de salida
            int totalCopagos = stmt.getInt(3);

            // Mostrar el resultado en un componente de la interfaz (por ejemplo, un JLabel)
            lblTotalCopagosMes.setText("Total Copagos " + mesSeleccionadoStr + " " + anioSeleccionado + ": " + totalCopagos);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al calcular el total de copagos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFiltrarPorMesYAnioActionPerformed

    
    private void btnCalcularTotalCopagosAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularTotalCopagosAnioActionPerformed
            try {
            // Obtener el año seleccionado como String desde el JComboBox y convertirlo a entero
            String anioSeleccionadoStr = (String) ComboAnio.getSelectedItem();
            int anioSeleccionado = Integer.parseInt(anioSeleccionadoStr);

            // Preparar el llamado al procedimiento almacenado
            CallableStatement stmt = conexionBD.getConnection().prepareCall("{CALL SumarCopagosCitasPorAnio(?, ?)}");
            stmt.setInt(1, anioSeleccionado); // Establecer el año seleccionado como parámetro de entrada
            stmt.registerOutParameter(2, Types.INTEGER); // Registrar el segundo parámetro como de salida

            // Ejecutar el procedimiento almacenado
            stmt.execute();

            // Obtener el total de copagos del parámetro de salida
            int totalCopagos = stmt.getInt(2);

            // Mostrar el resultado en un componente de la interfaz (por ejemplo, un JLabel)
            lblTotalCopagos.setText("Total Copagos en el Año " + anioSeleccionado + ": " + totalCopagos);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al calcular el total de copagos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCalcularTotalCopagosAnioActionPerformed

    private void btnFiltrarPorEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorEstadoActionPerformed
            try {
            // Obtener el estado seleccionado en el JComboBox
            String estadoSeleccionado = (String) comboEstados.getSelectedItem();

            // Llamar al procedimiento almacenado para obtener las citas médicas por estado
            String call = "{CALL obtener_citas_por_estado(?)}";
            CallableStatement statement = conexionBD.getConnection().prepareCall(call);
            statement.setString(1, estadoSeleccionado);
            ResultSet resultSet = statement.executeQuery();

            // Obtener metadatos de la consulta para determinar el número y nombre de las columnas
            DefaultTableModel modelo = new DefaultTableModel();
            int columnCount = resultSet.getMetaData().getColumnCount();
            String[] columnNames = new String[columnCount];

            // Obtener nombres de columnas de metadatos y configurar nombres descriptivos
            for (int i = 0; i < columnCount; i++) {
                String columnName = resultSet.getMetaData().getColumnLabel(i + 1); // Los índices de columna en JDBC comienzan desde 1

                // Configurar nombres descriptivos para columnas específicas
                switch (columnName) {
                    case "nombre_paciente":
                        columnNames[i] = "Nombre Paciente";
                        break;
                    case "nombre_medico":
                        columnNames[i] = "Nombre Médico";
                        break;
                    case "nombre_eps":
                        columnNames[i] = "EPS Paciente";
                        break;
                    case "copago":
                        columnNames[i] = "Copago";
                        break;
                    default:
                        columnNames[i] = columnName; // Usar el nombre de columna original para las demás columnas
                        break;
                }
            }

            // Establecer nombres de columnas en el modelo de tabla
            modelo.setColumnIdentifiers(columnNames);

            // Recorrer el resultado de la consulta y agregar cada fila al modelo de la tabla
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];

                // Obtener valores de cada columna y agregar a la fila de datos
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resultSet.getObject(i + 1); // Los índices de columna en JDBC comienzan desde 1
                }

                // Agregar una fila al modelo de la tabla con los datos de la cita
                modelo.addRow(rowData);
            }

            // Actualizar el modelo de la tabla con los nuevos datos
            tbRegistrosMedicos.setModel(modelo);

            // Cerrar recursos
            resultSet.close();
            statement.close();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al filtrar citas por estado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFiltrarPorEstadoActionPerformed

    private void executeAndShowQueryEstado(String query) throws SQLException {
        DefaultTableModel modelo = new DefaultTableModel();

        // Ejecutar la consulta SQL
        ResultSet resultSet = conexionBD.getConnection().createStatement().executeQuery(query);

        // Configurar el modelo de tabla con las columnas deseadas
        
        modelo.addColumn("Código");
        modelo.addColumn("Fecha Cita");
        modelo.addColumn("Hora");
        modelo.addColumn("Estado");
        modelo.addColumn("Nombre Paciente");
        modelo.addColumn("EPS");
        modelo.addColumn("Copago");
        modelo.addColumn("Nombre Médico");
        modelo.addColumn("Dirección IPS");

        // Iterar sobre los resultados y agregar filas al modelo de la tabla
        while (resultSet.next()) {
            Object[] rowData = new Object[10]; // Crear arreglo para cada fila con 10 columnas

            // Obtener valores específicos de cada columna y agregarlos al arreglo de datos de fila
           
            rowData[0] = resultSet.getString("codigo");
            rowData[1] = resultSet.getDate("fechaCita");
            rowData[2] = resultSet.getTime("hora");
            rowData[3] = resultSet.getString("estado");
            rowData[4] = resultSet.getString("nombre_paciente");
            rowData[5] = resultSet.getString("nombre_eps");
            rowData[6] = resultSet.getInt("copago");
            rowData[7] = resultSet.getString("nombre_medico");
            rowData[8] = resultSet.getString("direccion_ips");

            // Agregar la fila al modelo de la tabla
            modelo.addRow(rowData);
        }

        // Establecer el modelo de la tabla con los datos configurados
        tbRegistrosMedicos.setModel(modelo);
    }
    private void btnCambiarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarEstadoActionPerformed
        String codigoCitaStr = txtCodigoCita.getText().trim();

        // Verificar si el campo de texto está vacío
        if (codigoCitaStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un código de cita", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Obtener el nuevo estado seleccionado por el usuario
            String nuevoEstado = obtenerNuevoEstado();

            // Llamar al procedimiento almacenado para cambiar el estado de la cita
            String call = "{CALL cambiar_estado_cita(?, ?)}";
            CallableStatement statement = conexionBD.getConnection().prepareCall(call);
            statement.setString(1, nuevoEstado);
            statement.setString(2, codigoCitaStr);

            // Ejecutar la actualización en la base de datos
            int rowsUpdated = statement.executeUpdate();

            // Verificar si la actualización fue exitosa
            if (rowsUpdated > 0) {
                // Actualizar la tabla después de cambiar el estado de la cita
                mostrarCitasEnTabla(); // Actualizar la tabla
                JOptionPane.showMessageDialog(this, "Estado de cita cambiado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Mostrar mensaje si no se encuentra la cita con el código especificado
                JOptionPane.showMessageDialog(this, "La cita con el código especificado no existe", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Cerrar el statement
            statement.close();

        } catch (SQLException e) {
            // Manejar la excepción si ocurre un error de SQL
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cambiar el estado de la cita", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCambiarEstadoActionPerformed

    public String obtenerNuevoEstado() {
        String[] estadosPosibles = {"Programada", "Activa", "Atendida", "Cancelada"};

        // Mostrar un cuadro de diálogo de selección para que el usuario elija el nuevo estado
        String nuevoEstadoSeleccionado = (String) JOptionPane.showInputDialog(
                null,
                "Seleccione el nuevo estado:",
                "Cambiar Estado de Cita",
                JOptionPane.PLAIN_MESSAGE,
                null,
                estadosPosibles,
                estadosPosibles[0]); // Valor predeterminado (primer estado en la lista)

        // Verificar si se seleccionó un nuevo estado y devolverlo
        if (nuevoEstadoSeleccionado != null && nuevoEstadoSeleccionado.length() > 0) {
            return nuevoEstadoSeleccionado;
            
        } else {
            // Si no se selecciona ningún estado, puedes manejarlo devolviendo un estado predeterminado
            return "Programada"; // Estado predeterminado
        }
        
    }

    private int obtenerIndiceMes(String nombreMes) {
        String[] nombresMeses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};

        // Buscar el índice del nombre del mes en el array de nombres de meses
        for (int i = 0; i < nombresMeses.length; i++) {
            if (nombresMeses[i].equalsIgnoreCase(nombreMes)) {
                return i; // Devolver el índice del mes encontrado
            }
        }

        // Si no se encuentra el mes, devolver -1 o lanzar una excepción según tu lógica
        return -1; // Devolver -1 si no se encuentra el mes (manejo de errores)
    }
    
    
    public void MostrarInfo(ArrayList<CitasMedicas> citas){
        DefaultTableModel modelo = new DefaultTableModel(); 
        String encabezado[]={"Numero Cita","Estado","Documento","Nombre y Apellido","Afiliacion","Copago","Medico","Especialidad de Cita","Fecha Cita","Hora","Direccion"};
        modelo.setColumnIdentifiers(encabezado);
        int numeroCita = 1;
        
        for(int i=0; i < citas.size(); i++){
            modelo.addRow(new Object[]{numeroCita,citas.get(i).getEstadoCitas(),citas.get(i).getDocumentoPaciente(), citas.get(i).getNombreyApellidoPaciente(),
                 citas.get(i).getAfiliadoPaciente(),citas.get(i).getCoPago(),citas.get(i).getNombreMedico(), citas.get(i).getTipoEspecialidad(),
            citas.get(i).getFechaCita(), citas.get(i).getHoraCita(), citas.get(i).getConsultorioCita()});
            numeroCita++;
        }
        tbRegistrosMedicos.setModel(modelo);
    }
    
    /**
     * @param args the command line arguments
     */
    private boolean validarInformacion(){
        boolean result = true;
        
        if(this.dateInicial.getDate() == null){
            result = false;
        }
        
        if(this.dateFinal.getDate() == null){
             result = false;
        }
        
        return result;
    }
     
    public static void main(String args[]) {
  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboAnio;
    private javax.swing.JComboBox<String> ComboAnioCopago;
    private javax.swing.JButton btnCalcularTotalCopagos;
    private javax.swing.JButton btnCalcularTotalCopagosAnio;
    private javax.swing.JButton btnCambiarEstado;
    private javax.swing.JButton btnCitasporMedico;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnFiltrarPorEstado;
    private javax.swing.JButton btnFiltrarPorMesYAnio;
    private javax.swing.JButton btnRestablecer;
    private javax.swing.JComboBox<String> comboEstados;
    private javax.swing.JComboBox<String> comboMedico;
    private javax.swing.JComboBox<String> comboMeses;
    private javax.swing.JComboBox<String> comboMesesCopago;
    private com.toedter.calendar.JDateChooser dateFinal;
    private com.toedter.calendar.JDateChooser dateInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalCopagos;
    private javax.swing.JLabel lblTotalCopagosMes;
    private javax.swing.JTable tbRegistrosMedicos;
    private javax.swing.JTextField txtCodigoCita;
    // End of variables declaration//GEN-END:variables
}
