
package InterfazPrincipal;

import Escudero.Alert;
import InterfazPrincipal.Clases.CitasMedicas;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TRSYR
 */
public class FrmGestionCitas extends javax.swing.JFrame {

    /**
     * Creates new form FrmGestionCitas
     */
    public SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
    private FrmInterfazPrincipal principal;
    private FrmGestionCitas gestionCitas;
    private final ArrayList<CitasMedicas>citas;
    
    public FrmGestionCitas(ArrayList<CitasMedicas>citas) {
        initComponents();
        this.citas = citas;
        MostrarInfo(this.citas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbRegistrosMedicos = new javax.swing.JTable();
        dateFinal = new com.toedter.calendar.JDateChooser();
        dateInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        btnCitasporMedico = new javax.swing.JButton();
        comboMedico = new javax.swing.JComboBox<>();
        comboMeses = new javax.swing.JComboBox<>();
        btnRestablecer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 600));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Activos", "Cancelados", "Atendidos" }));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Estado");

        tbRegistrosMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbRegistrosMedicos);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Fecha Inicial");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Fecha Final");

        btnConsultar.setText("Reporte de citas");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnCitasporMedico.setText("Citas por medico");
        btnCitasporMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitasporMedicoActionPerformed(evt);
            }
        });

        comboMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dra. Laura Lopez", "Dr. Manuel Torres", "Dra. Sofia Diaz", "Dr. Victor Ramirez", "Dra. Ana Maria Gomez", "Dr. Luis Hernandez", "Dra. Marta Perez", "Dr. Jose Gonzalez", "Dr. Jorge Martinez", "Dra. Andrea Fernandez", "Dr. Alejandro Garcia", "Dra. Patricia Castro", "Dr. Roberto Diaz", "Dr. Miguel Rodriguez", "Dra. Lucia Fernandez", "Dr. Pedro Sanchez", "Dra. Laura Martinez", "Dra. Maria Lopez", "Dr. Juan Perez" }));

        comboMeses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        btnRestablecer.setText("Reestablecer Registros");
        btnRestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestablecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnConsultar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dateInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                            .addComponent(dateFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(132, 132, 132)
                                .addComponent(btnCitasporMedico))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(comboMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(comboMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jLabel3)))
                        .addGap(0, 426, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRestablecer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCitasporMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConsultar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(btnRestablecer)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
        if(this.validarInformacion()){
          ArrayList<CitasMedicas> citasFiltradas = new ArrayList<>();
          Date fechaInicial = this.dateInicial.getDate();
          Date fechaFinal   = this.dateFinal.getDate();
          
          Calendar callInicial = Calendar.getInstance();
          callInicial.setTime(fechaInicial);
          callInicial.set(callInicial.HOUR_OF_DAY, 0);      
          callInicial.set(callInicial.MINUTE, 0);
          callInicial.set(callInicial.SECOND, 0);
          callInicial.set(callInicial.MILLISECOND, 0);

          
          Calendar callFinal = Calendar.getInstance();
          callFinal.setTime(fechaFinal);
          callFinal.set(callFinal.HOUR_OF_DAY, 23);      
          callFinal.set(callFinal.MINUTE, 59);
          callFinal.set(callFinal.SECOND, 59);
          callFinal.set(callFinal.MILLISECOND, 999);
          
          
          
         
          for (CitasMedicas cita : citas) {
                if ((cita.getFechaCita().after(callInicial.getTime()) || cita.getFechaCita().equals(callInicial.getTime()))
                        && (cita.getFechaCita().before(callFinal.getTime()) || cita.getFechaCita().equals(callFinal.getTime()))) {
                    citasFiltradas.add(cita);
                }
            }
          
           this.MostrarInfo(citasFiltradas);
      }else{
          Alert.showMessageError("Consultorio", "Valide las fechas a buscar.",10,this);
      }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnCitasporMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitasporMedicoActionPerformed
        // TODO add your handling code here:
        // Obtener el nombre del médico seleccionado
        String nombreMedico = comboMedico.getSelectedItem().toString();
        // Obtener el mes seleccionado (0 = enero, 1 = febrero, ..., 11 = diciembre)
        int mesSeleccionado = comboMeses.getSelectedIndex();

        // Generar reporte de citas por médico en el mes seleccionado
        generarReporteCitasPorMedicoEnMes(nombreMedico, mesSeleccionado);
    }//GEN-LAST:event_btnCitasporMedicoActionPerformed

    private void btnRestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestablecerActionPerformed
        // TODO add your handling code here:
        
        MostrarInfo(citas);
    }//GEN-LAST:event_btnRestablecerActionPerformed

    public void MostrarInfo(ArrayList<CitasMedicas> citas){
        DefaultTableModel modelo = new DefaultTableModel(); 
        String encabezado[]={"Estado","Documento","Nombre y Apellido","Afiliacion","Copago","Medico","Especialidad de Cita","Fecha Cita","Hora","Direccion"};
        modelo.setColumnIdentifiers(encabezado);
        
        for(int i=0; i < citas.size(); i++){
            modelo.addRow(new Object[]{citas.get(i).getEstadoCitas(),citas.get(i).getDocumentoPaciente(), citas.get(i).getNombreyApellidoPaciente(),
                 citas.get(i).getAfiliadoPaciente(),citas.get(i).getCoPago(),citas.get(i).getNombreMedico(), citas.get(i).getTipoEspecialidad(),
            citas.get(i).getFechaCita(), citas.get(i).getHoraCita(), citas.get(i).getConsultorioCita()});
        }
        tbRegistrosMedicos.setModel(modelo);
    }
    
    /**
     * @param args the command line arguments
     */
    private boolean validarInformacion(){
        boolean result = true;
        
        if(this.dateInicial.getDate() == null){
            result = false;
        }
        
        if(this.dateFinal.getDate() == null){
             result = false;
        }
        
        return result;
    }
    
     private void generarReporteCitasPorMedicoEnMes(String nombreMedico, int mes) {
        ArrayList<CitasMedicas> citasFiltradas = new ArrayList<>();

        
        for (CitasMedicas cita : citas) {
            
            String nombreMedicoCita = cita.getNombreMedico();
            
            Calendar cal = Calendar.getInstance();
            cal.setTime(cita.getFechaCita());
            int mesCita = cal.get(Calendar.MONTH);

            
            if (nombreMedicoCita.equals(nombreMedico) && mesCita == mes) {
                citasFiltradas.add(cita);
            }
        }
        MostrarInfo(citasFiltradas);
    }
    
    public static void main(String args[]) {
        ArrayList<CitasMedicas>citas = new ArrayList<CitasMedicas>();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCitasporMedico;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnRestablecer;
    private javax.swing.JComboBox<String> comboMedico;
    private javax.swing.JComboBox<String> comboMeses;
    private com.toedter.calendar.JDateChooser dateFinal;
    private com.toedter.calendar.JDateChooser dateInicial;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbRegistrosMedicos;
    // End of variables declaration//GEN-END:variables
}
